// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: game_state.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace MM26.IO.Models {

  /// <summary>Holder for reflection information generated from game_state.proto</summary>
  public static partial class GameStateReflection {

    #region Descriptor
    /// <summary>File descriptor for game_state.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static GameStateReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChBnYW1lX3N0YXRlLnByb3RvEgpnYW1lX3N0YXRlGgtib2FyZC5wcm90bxoP",
            "Y2hhcmFjdGVyLnByb3RvItEBCglHYW1lU3RhdGUSEAoIc3RhdGVfaWQYASAB",
            "KAMSHgoIcHZwQm9hcmQYAiABKAsyDC5ib2FyZC5Cb2FyZBJJChJwbGF5ZXJJ",
            "ZFRvQm9hcmRNYXAYAyADKAsyLS5nYW1lX3N0YXRlLkdhbWVTdGF0ZS5QbGF5",
            "ZXJJZFRvQm9hcmRNYXBFbnRyeRpHChdQbGF5ZXJJZFRvQm9hcmRNYXBFbnRy",
            "eRILCgNrZXkYASABKAkSGwoFdmFsdWUYAiABKAsyDC5ib2FyZC5Cb2FyZDoC",
            "OAEiHwoKR2FtZUNoYW5nZRIRCgljaGFuZ2VfaWQYASABKANCQAocbWVjaC5t",
            "YW5pYS5lbmdpbmUuZ2FtZS5tb2RlbEIPR2FtZVN0YXRlUHJvdG9zqgIOTU0y",
            "Ni5JTy5Nb2RlbHNiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::MM26.IO.Models.BoardReflection.Descriptor, global::MM26.IO.Models.CharacterReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::MM26.IO.Models.GameState), global::MM26.IO.Models.GameState.Parser, new[]{ "StateId", "PvpBoard", "PlayerIdToBoardMap" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, }),
            new pbr::GeneratedClrTypeInfo(typeof(global::MM26.IO.Models.GameChange), global::MM26.IO.Models.GameChange.Parser, new[]{ "ChangeId" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class GameState : pb::IMessage<GameState> {
    private static readonly pb::MessageParser<GameState> _parser = new pb::MessageParser<GameState>(() => new GameState());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameState> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::MM26.IO.Models.GameStateReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameState() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameState(GameState other) : this() {
      stateId_ = other.stateId_;
      pvpBoard_ = other.pvpBoard_ != null ? other.pvpBoard_.Clone() : null;
      playerIdToBoardMap_ = other.playerIdToBoardMap_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameState Clone() {
      return new GameState(this);
    }

    /// <summary>Field number for the "state_id" field.</summary>
    public const int StateIdFieldNumber = 1;
    private long stateId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long StateId {
      get { return stateId_; }
      set {
        stateId_ = value;
      }
    }

    /// <summary>Field number for the "pvpBoard" field.</summary>
    public const int PvpBoardFieldNumber = 2;
    private global::MM26.IO.Models.Board pvpBoard_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::MM26.IO.Models.Board PvpBoard {
      get { return pvpBoard_; }
      set {
        pvpBoard_ = value;
      }
    }

    /// <summary>Field number for the "playerIdToBoardMap" field.</summary>
    public const int PlayerIdToBoardMapFieldNumber = 3;
    private static readonly pbc::MapField<string, global::MM26.IO.Models.Board>.Codec _map_playerIdToBoardMap_codec
        = new pbc::MapField<string, global::MM26.IO.Models.Board>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::MM26.IO.Models.Board.Parser), 26);
    private readonly pbc::MapField<string, global::MM26.IO.Models.Board> playerIdToBoardMap_ = new pbc::MapField<string, global::MM26.IO.Models.Board>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::MM26.IO.Models.Board> PlayerIdToBoardMap {
      get { return playerIdToBoardMap_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameState);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameState other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StateId != other.StateId) return false;
      if (!object.Equals(PvpBoard, other.PvpBoard)) return false;
      if (!PlayerIdToBoardMap.Equals(other.PlayerIdToBoardMap)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (StateId != 0L) hash ^= StateId.GetHashCode();
      if (pvpBoard_ != null) hash ^= PvpBoard.GetHashCode();
      hash ^= PlayerIdToBoardMap.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (StateId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(StateId);
      }
      if (pvpBoard_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(PvpBoard);
      }
      playerIdToBoardMap_.WriteTo(output, _map_playerIdToBoardMap_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (StateId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(StateId);
      }
      if (pvpBoard_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PvpBoard);
      }
      size += playerIdToBoardMap_.CalculateSize(_map_playerIdToBoardMap_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameState other) {
      if (other == null) {
        return;
      }
      if (other.StateId != 0L) {
        StateId = other.StateId;
      }
      if (other.pvpBoard_ != null) {
        if (pvpBoard_ == null) {
          PvpBoard = new global::MM26.IO.Models.Board();
        }
        PvpBoard.MergeFrom(other.PvpBoard);
      }
      playerIdToBoardMap_.Add(other.playerIdToBoardMap_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            StateId = input.ReadInt64();
            break;
          }
          case 18: {
            if (pvpBoard_ == null) {
              PvpBoard = new global::MM26.IO.Models.Board();
            }
            input.ReadMessage(PvpBoard);
            break;
          }
          case 26: {
            playerIdToBoardMap_.AddEntriesFrom(input, _map_playerIdToBoardMap_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class GameChange : pb::IMessage<GameChange> {
    private static readonly pb::MessageParser<GameChange> _parser = new pb::MessageParser<GameChange>(() => new GameChange());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameChange> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::MM26.IO.Models.GameStateReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameChange() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameChange(GameChange other) : this() {
      changeId_ = other.changeId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameChange Clone() {
      return new GameChange(this);
    }

    /// <summary>Field number for the "change_id" field.</summary>
    public const int ChangeIdFieldNumber = 1;
    private long changeId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ChangeId {
      get { return changeId_; }
      set {
        changeId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameChange);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameChange other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ChangeId != other.ChangeId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ChangeId != 0L) hash ^= ChangeId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ChangeId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(ChangeId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ChangeId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ChangeId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameChange other) {
      if (other == null) {
        return;
      }
      if (other.ChangeId != 0L) {
        ChangeId = other.ChangeId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            ChangeId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
